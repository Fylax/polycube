/**
* bridge API
* bridge API generated from bridge.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
*/

/* Do not edit this file manually */

#include "PortsAccessSchema.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

PortsAccessSchema::PortsAccessSchema() {
  m_Vlanid = 0;
  m_VlanidIsSet = false;
}

PortsAccessSchema::~PortsAccessSchema() {}

void PortsAccessSchema::validate() {
  // TODO: implement validation
}

nlohmann::json PortsAccessSchema::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_VlanidIsSet) {
    val["vlanid"] = m_Vlanid;
  }

  return val;
}

void PortsAccessSchema::fromJson(nlohmann::json &val) {
  if (val.find("vlanid") != val.end()) {
    setVlanid(val.at("vlanid"));
  }
}

nlohmann::json PortsAccessSchema::getKeys() {
  nlohmann::json val = nlohmann::json::object();

  return val;
}

nlohmann::json PortsAccessSchema::getElements() {
  nlohmann::json val = nlohmann::json::object();

  val["vlanid"]["name"] = "vlanid";
  val["vlanid"]["type"] = "leaf";  // Suppose that type is leaf
  val["vlanid"]["simpletype"] = "integer";
  val["vlanid"]["description"] =
      R"POLYCUBE(VLAN associated with this interface)POLYCUBE";
  val["vlanid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["vlanid"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "VLAN associated with this interface"
})POLYCUBE");

  return val;
}

nlohmann::json PortsAccessSchema::getWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["vlanid"]["name"] = "vlanid";
  val["vlanid"]["simpletype"] = "integer";
  val["vlanid"]["description"] =
      R"POLYCUBE(VLAN associated with this interface)POLYCUBE";
  val["vlanid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["vlanid"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "VLAN associated with this interface"
})POLYCUBE");

  return val;
}

nlohmann::json PortsAccessSchema::getComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  return val;
}

int32_t PortsAccessSchema::getVlanid() const {
  return m_Vlanid;
}

void PortsAccessSchema::setVlanid(int32_t value) {
  m_Vlanid = value;
  m_VlanidIsSet = true;
}

bool PortsAccessSchema::vlanidIsSet() const {
  return m_VlanidIsSet;
}

void PortsAccessSchema::unsetVlanid() {
  m_VlanidIsSet = false;
}
}
}
}
}
