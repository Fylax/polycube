/**
* bridge API
* bridge API generated from bridge.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
*/

/* Do not edit this file manually */

#include "StpSchema.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

StpSchema::StpSchema() {
  m_Hellotime = 0;
  m_HellotimeIsSet = false;
  m_Vlan = 0;
  m_VlanIsSet = false;
  m_Forwarddelay = 0;
  m_ForwarddelayIsSet = false;
  m_Priority = 0;
  m_PriorityIsSet = false;
  m_Maxmessageage = 0;
  m_MaxmessageageIsSet = false;
  m_Address = "";
  m_AddressIsSet = false;
}

StpSchema::~StpSchema() {}

void StpSchema::validate() {
  // TODO: implement validation
}

nlohmann::json StpSchema::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_HellotimeIsSet) {
    val["hellotime"] = m_Hellotime;
  }

  if (m_VlanIsSet) {
    val["vlan"] = m_Vlan;
  }

  if (m_ForwarddelayIsSet) {
    val["forwarddelay"] = m_Forwarddelay;
  }

  if (m_PriorityIsSet) {
    val["priority"] = m_Priority;
  }

  if (m_MaxmessageageIsSet) {
    val["maxmessageage"] = m_Maxmessageage;
  }

  if (m_AddressIsSet) {
    val["address"] = m_Address;
  }

  return val;
}

void StpSchema::fromJson(nlohmann::json &val) {
  if (val.find("hellotime") != val.end()) {
    setHellotime(val.at("hellotime"));
  }

  if (val.find("vlan") != val.end()) {
    setVlan(val.at("vlan"));
  }

  if (val.find("forwarddelay") != val.end()) {
    setForwarddelay(val.at("forwarddelay"));
  }

  if (val.find("priority") != val.end()) {
    setPriority(val.at("priority"));
  }

  if (val.find("maxmessageage") != val.end()) {
    setMaxmessageage(val.at("maxmessageage"));
  }

  if (val.find("address") != val.end()) {
    setAddress(val.at("address"));
  }
}

nlohmann::json StpSchema::getKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["vlan"]["name"] = "vlan";
  val["vlan"]["type"] = "key";
  val["vlan"]["simpletype"] = "integer";
  val["vlan"]["description"] =
      R"POLYCUBE(VLAN identifier for this entry)POLYCUBE";
  val["vlan"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json StpSchema::getElements() {
  nlohmann::json val = nlohmann::json::object();

  val["hellotime"]["name"] = "hellotime";
  val["hellotime"]["type"] = "leaf";  // Suppose that type is leaf
  val["hellotime"]["simpletype"] = "integer";
  val["hellotime"]["description"] =
      R"POLYCUBE(Interval between transmissions of BPDU messages)POLYCUBE";
  val["hellotime"]["example"] = R"POLYCUBE()POLYCUBE";
  val["hellotime"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Interval between transmissions of BPDU messages"
})POLYCUBE");
  val["forwarddelay"]["name"] = "forwarddelay";
  val["forwarddelay"]["type"] = "leaf";  // Suppose that type is leaf
  val["forwarddelay"]["simpletype"] = "integer";
  val["forwarddelay"]["description"] =
      R"POLYCUBE(Delay used by STP bridges for port state transition)POLYCUBE";
  val["forwarddelay"]["example"] = R"POLYCUBE()POLYCUBE";
  val["forwarddelay"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Delay used by STP bridges for port state transition"
})POLYCUBE");
  val["priority"]["name"] = "priority";
  val["priority"]["type"] = "leaf";  // Suppose that type is leaf
  val["priority"]["simpletype"] = "integer";
  val["priority"]["description"] = R"POLYCUBE(Bridge priority for STP)POLYCUBE";
  val["priority"]["example"] = R"POLYCUBE()POLYCUBE";
  val["priority"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Bridge priority for STP"
})POLYCUBE");
  val["maxmessageage"]["name"] = "maxmessageage";
  val["maxmessageage"]["type"] = "leaf";  // Suppose that type is leaf
  val["maxmessageage"]["simpletype"] = "integer";
  val["maxmessageage"]["description"] =
      R"POLYCUBE(Maximum age of a BPDU)POLYCUBE";
  val["maxmessageage"]["example"] = R"POLYCUBE()POLYCUBE";
  val["maxmessageage"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Maximum age of a BPDU"
})POLYCUBE");
  val["address"]["name"] = "address";
  val["address"]["type"] = "leaf";  // Suppose that type is leaf
  val["address"]["simpletype"] = "string";
  val["address"]["description"] =
      R"POLYCUBE(Main MAC address used by the STP)POLYCUBE";
  val["address"]["example"] = R"POLYCUBE()POLYCUBE";
  val["address"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "string",
  "description" : "Main MAC address used by the STP"
})POLYCUBE");

  return val;
}

nlohmann::json StpSchema::getWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["hellotime"]["name"] = "hellotime";
  val["hellotime"]["simpletype"] = "integer";
  val["hellotime"]["description"] =
      R"POLYCUBE(Interval between transmissions of BPDU messages)POLYCUBE";
  val["hellotime"]["example"] = R"POLYCUBE()POLYCUBE";
  val["hellotime"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Interval between transmissions of BPDU messages"
})POLYCUBE");
  val["forwarddelay"]["name"] = "forwarddelay";
  val["forwarddelay"]["simpletype"] = "integer";
  val["forwarddelay"]["description"] =
      R"POLYCUBE(Delay used by STP bridges for port state transition)POLYCUBE";
  val["forwarddelay"]["example"] = R"POLYCUBE()POLYCUBE";
  val["forwarddelay"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Delay used by STP bridges for port state transition"
})POLYCUBE");
  val["priority"]["name"] = "priority";
  val["priority"]["simpletype"] = "integer";
  val["priority"]["description"] = R"POLYCUBE(Bridge priority for STP)POLYCUBE";
  val["priority"]["example"] = R"POLYCUBE()POLYCUBE";
  val["priority"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Bridge priority for STP"
})POLYCUBE");
  val["maxmessageage"]["name"] = "maxmessageage";
  val["maxmessageage"]["simpletype"] = "integer";
  val["maxmessageage"]["description"] =
      R"POLYCUBE(Maximum age of a BPDU)POLYCUBE";
  val["maxmessageage"]["example"] = R"POLYCUBE()POLYCUBE";
  val["maxmessageage"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "integer",
  "format" : "uint32",
  "description" : "Maximum age of a BPDU"
})POLYCUBE");
  val["address"]["name"] = "address";
  val["address"]["simpletype"] = "string";
  val["address"]["description"] =
      R"POLYCUBE(Main MAC address used by the STP)POLYCUBE";
  val["address"]["example"] = R"POLYCUBE()POLYCUBE";
  val["address"]["jsonSchema"] = nlohmann::json::parse(R"POLYCUBE({
  "type" : "string",
  "description" : "Main MAC address used by the STP"
})POLYCUBE");

  return val;
}

nlohmann::json StpSchema::getComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  return val;
}

int32_t StpSchema::getHellotime() const {
  return m_Hellotime;
}

void StpSchema::setHellotime(int32_t value) {
  m_Hellotime = value;
  m_HellotimeIsSet = true;
}

bool StpSchema::hellotimeIsSet() const {
  return m_HellotimeIsSet;
}

void StpSchema::unsetHellotime() {
  m_HellotimeIsSet = false;
}
int32_t StpSchema::getVlan() const {
  return m_Vlan;
}

void StpSchema::setVlan(int32_t value) {
  m_Vlan = value;
  m_VlanIsSet = true;
}

bool StpSchema::vlanIsSet() const {
  return m_VlanIsSet;
}

void StpSchema::unsetVlan() {
  m_VlanIsSet = false;
}
int32_t StpSchema::getForwarddelay() const {
  return m_Forwarddelay;
}

void StpSchema::setForwarddelay(int32_t value) {
  m_Forwarddelay = value;
  m_ForwarddelayIsSet = true;
}

bool StpSchema::forwarddelayIsSet() const {
  return m_ForwarddelayIsSet;
}

void StpSchema::unsetForwarddelay() {
  m_ForwarddelayIsSet = false;
}
int32_t StpSchema::getPriority() const {
  return m_Priority;
}

void StpSchema::setPriority(int32_t value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}

bool StpSchema::priorityIsSet() const {
  return m_PriorityIsSet;
}

void StpSchema::unsetPriority() {
  m_PriorityIsSet = false;
}
int32_t StpSchema::getMaxmessageage() const {
  return m_Maxmessageage;
}

void StpSchema::setMaxmessageage(int32_t value) {
  m_Maxmessageage = value;
  m_MaxmessageageIsSet = true;
}

bool StpSchema::maxmessageageIsSet() const {
  return m_MaxmessageageIsSet;
}

void StpSchema::unsetMaxmessageage() {
  m_MaxmessageageIsSet = false;
}
std::string StpSchema::getAddress() const {
  return m_Address;
}

void StpSchema::setAddress(std::string value) {
  m_Address = value;
  m_AddressIsSet = true;
}

bool StpSchema::addressIsSet() const {
  return m_AddressIsSet;
}

void StpSchema::unsetAddress() {
  m_AddressIsSet = false;
}
}
}
}
}
