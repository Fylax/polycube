/**
* bridge API
* bridge API generated from bridge.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
*/

/* Do not edit this file manually */

/*
 * StpSchema.h
 *
 *
 */

#pragma once

#include "ModelBase.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
///
/// </summary>
class StpSchema : public ModelBase {
 public:
  StpSchema();
  virtual ~StpSchema();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  nlohmann::json toJson() const override;
  void fromJson(nlohmann::json &json) override;

  static nlohmann::json getKeys();
  static nlohmann::json getElements();
  static nlohmann::json getWritableLeafs();
  static nlohmann::json getComplexElements();
  /////////////////////////////////////////////
  /// StpSchema members

  /// <summary>
  /// Interval between transmissions of BPDU messages
  /// </summary>
  int32_t getHellotime() const;
  void setHellotime(int32_t value);
  bool hellotimeIsSet() const;
  void unsetHellotime();

  /// <summary>
  /// VLAN identifier for this entry
  /// </summary>
  int32_t getVlan() const;
  void setVlan(int32_t value);
  bool vlanIsSet() const;
  void unsetVlan();

  /// <summary>
  /// Delay used by STP bridges for port state transition
  /// </summary>
  int32_t getForwarddelay() const;
  void setForwarddelay(int32_t value);
  bool forwarddelayIsSet() const;
  void unsetForwarddelay();

  /// <summary>
  /// Bridge priority for STP
  /// </summary>
  int32_t getPriority() const;
  void setPriority(int32_t value);
  bool priorityIsSet() const;
  void unsetPriority();

  /// <summary>
  /// Maximum age of a BPDU
  /// </summary>
  int32_t getMaxmessageage() const;
  void setMaxmessageage(int32_t value);
  bool maxmessageageIsSet() const;
  void unsetMaxmessageage();

  /// <summary>
  /// Main MAC address used by the STP
  /// </summary>
  std::string getAddress() const;
  void setAddress(std::string value);
  bool addressIsSet() const;
  void unsetAddress();

 protected:
  int32_t m_Hellotime;
  bool m_HellotimeIsSet;
  int32_t m_Vlan;
  bool m_VlanIsSet;
  int32_t m_Forwarddelay;
  bool m_ForwarddelayIsSet;
  int32_t m_Priority;
  bool m_PriorityIsSet;
  int32_t m_Maxmessageage;
  bool m_MaxmessageageIsSet;
  std::string m_Address;
  bool m_AddressIsSet;
};
}
}
}
}
